#!/usr/bin/env python
#coding:utf-8
"""
Click and drag a ball (with mouse button down) on an RGB or HSV slider.
Click one of the colored objects to print RGB and HSV values.
"""
from __future__ import print_function, division
import visual as vp

print(__doc__)

# Bruce Sherwood; opacity slider added by Jonathan Brandmeyer

vp.scene.userspin = 0
GREY = (0.85, 0.85, 0.85)

class Slider(object):
    """ Slider Class."""
    def __init__(self, pos=vp.vector(0, 0, 0), axis=vp.vector(0, 1.0, 0), value=None,
                 width=0.15, min_val=0, max_val=100., color=(1, 0, 0)):
        pos = vp.vector(pos)
       # axis = vector(axis)
        if value == None:
            value = min_val
        self.min = min_val
        self.max = max_val
        self.value = value
        self.shaft = vp.cylinder(pos=pos, axis=axis, radius=width/4.0,
                                 color=GREY)
        self.start = pos
        self.axis = axis
        self.control = vp.sphere(
            pos=self.start+(self.min+value)/(self.max-self.min)*self.axis,
            radius=width/2., color=color)
        self.label = vp.label(pos=self.control.pos, text="%0.2f" % value,
                              opacity=0, box=0, line=0)

    def getslider(self, pos=None):
        """ Get the value of a slider."""
        pos = vp.vector(pos)
        value = self.min+(self.max-self.min)*(pos.y-self.start.y)/ vp.mag(self.axis)
        self.setslider(value)
        return value

    def setslider(self, value=None):
        """ Set the value of a slider."""
        if value > self.max:
            value = self.max
        if value < self.min:
            value = self.min
        self.value = value
        self.control.pos = self.start+(self.min+value)/(self.max-self.min)*self.axis
        self.label.pos = self.control.pos
        self.label.text = "%0.2f" % value

vp.scene.width = 800
vp.scene.height = 400
vp.scene.center = (0, 0.5, 0)
vp.scene.title = "RGB and HSV color"
WCUBE = 0.2
RGB = (1, 0, 0)
OPACITY = 1
HSV = vp.color.rgb_to_hsv((1, 0, 0))
CTRL = [Slider(pos=(-1.75, 0, 0), color=(1, 0, 0), max_val=1., value=RGB[0]),
        Slider(pos=(-1.5, 0, 0), color=(0, 1, 0), max_val=1., value=RGB[1]),
        Slider(pos=(-1.25, 0, 0), color=(0, 0, 1), max_val=1., value=RGB[2]),
        Slider(pos=(-1, 0, 0), color=(0.5, 0.5, 0.5), max_val=1., value=OPACITY),
        Slider(pos=(+1.0, 0, 0), color=(1, 0, 0), max_val=1., value=HSV[0]),
        Slider(pos=(+1.25, 0, 0), color=(1, 1, 1), max_val=1., value=HSV[1]),
        Slider(pos=(+1.5, 0, 0), color=(0.5, 0.5, 0.5), max_val=1., value=HSV[2])]
PANEL = vp.box(pos=(0, 0.5, 0), length=1.5, height=1, width=0.1, color=RGB, opacity=OPACITY)
BALL = vp.sphere(pos=(0, 0.5, 0), radius=0.5, color=RGB, opacity=OPACITY)
CUBE = vp.box(pos=(0, 1.2, 0), axis=(1, 1, 1),
              length=WCUBE, width=WCUBE, height=WCUBE, color=RGB, opacity=OPACITY)
BEHIND = vp.arrow(pos=(-0.75, 0, -0.75), axis=(1.5, 1, 0), color=vp.color.white)
DRAGOBJ = None

while True:
    vp.rate(50)
    INDEX = -1
    CUBE.rotate(angle=0.1, axis=vp.scene.up)
    if vp.scene.mouse.events:
        M_EVENT = vp.scene.mouse.getevent()
        if M_EVENT.click == "left" and M_EVENT.pick in [PANEL, BALL, CUBE]:
            print("RGB = (%0.3f,%0.3f,%0.3f), opacity = %0.3f" % (
                CTRL[0].value, CTRL[1].value, CTRL[2].value, CTRL[3].value))
            print("HSV = (%0.3f,%0.3f,%0.3f)" % (
                CTRL[4].value, CTRL[5].value, CTRL[6].value))
            continue
        elif M_EVENT.drop == "left":
            DRAGOBJ = None
        elif M_EVENT.drag == "left":
            for INDEX in range(7):
                s = CTRL[INDEX]
                if M_EVENT.pick is s.control:
                    POS = M_EVENT.project(normal=(0, 0, 1))
                    DRAGOBJ = s
                    break
    NEWPOS = vp.scene.mouse.project(normal=(0, 0, 1))
    if DRAGOBJ and (NEWPOS != POS):
        POS = NEWPOS
        DRAGOBJ.getslider(POS)
        if 0 <= INDEX <= 3: # rgb sliders
            CUBE.color = BALL.color = PANEL.color = (CTRL[0].value,
                                                     CTRL[1].value,
                                                     CTRL[2].value)
            CUBE.opacity = BALL.opacity = PANEL.opacity = CTRL[3].value
            HSV = vp.color.rgb_to_hsv(BALL.color)
            for nn in range(3):
                CTRL[nn+4].setslider(HSV[nn])
        else: # hsv sliders
            RGB = vp.color.hsv_to_rgb((CTRL[4].value,
                                       CTRL[5].value,
                                       CTRL[6].value))
            CUBE.color = BALL.color = PANEL.color = RGB
            CUBE.opacity = BALL.opacity = PANEL.opacity = CTRL[3].value
            for nn in range(3):
                CTRL[nn].setslider(RGB[nn])

