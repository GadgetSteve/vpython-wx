#!/usr/bin/env python
#coding:utf-8
#from visual import *
""" Demo of a bouncing ball with a trail, in a box."""
from __future__ import print_function, division
import visual as vp

print(__doc__)
print("""
Right button drag or Ctrl-drag to rotate "camera" to view scene.
Middle button or Alt-drag to drag up or down to zoom in or out.
  On a two-button mouse, middle is left + right. Use ctrl-c to stop.
""")

SIDE = 4.0
THK = 0.3
S2 = 2*SIDE - THK
S3 = 2*SIDE + THK
WALL_R = vp.box(pos=(SIDE, 0, 0), size=(THK, S2, S3), color=vp.color.red)
WALL_L = vp.box(pos=(-SIDE, 0, 0), size=(THK, S2, S3), color=vp.color.red)
WALL_B = vp.box(pos=(0, -SIDE, 0), size=(S3, THK, S3), color=vp.color.blue)
WALL_T = vp.box(pos=(0, SIDE, 0), size=(S3, THK, S3), color=vp.color.blue)
WALL_BK = vp.box(pos=(0, 0, -SIDE), size=(S2, S2, THK), color=(0.7, 0.7, 0.7))

BALL = vp.sphere(color=vp.color.green, radius=0.4, make_trail=True,
                 retain=200)
BALL.trail_object.radius = 0.05
BALL.mass = 1.0
BALL.p = vp.vector(-0.15, -0.23, +0.27)

SIDE = SIDE - THK*0.5 - BALL.radius

DT = 0.5
T = 0.0
while True:
    vp.rate(100)
    T = T + DT
    BALL.pos = BALL.pos + (BALL.p/BALL.mass)*DT
    if not SIDE > BALL.x > -SIDE:
        BALL.p.x = -BALL.p.x
    if not SIDE > BALL.y > -SIDE:
        BALL.p.y = -BALL.p.y
    if not SIDE > BALL.z > -SIDE:
        BALL.p.z = -BALL.p.z

