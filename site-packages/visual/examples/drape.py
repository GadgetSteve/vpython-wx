#!/usr/bin/env python
#coding:utf-8
""" Drape Demo
Click to place spheres under falling string.
Right button drag or Ctrl-drag to rotate view.
Middle button drag or Alt-drag to zoom in or out.
  On a two-button mouse, middle is left + right.
"""
from __future__ import print_function, division
#from visual import *
import visual as vp

print(__doc__)

# David Scherer

vp.scene.title = "Drape"
RESTLENGTH = 0.02
M = 0.010 * RESTLENGTH
G = 9.8
DT = 0.002
K = 3
DAMP = (1-0)**DT
NSPHERES = 3
FLOOR = 0

# Create the stringy thing:
BAND = vp.curve(
    x=vp.arange(-1, 1, RESTLENGTH),
    y=1,
    radius=0.02
)

BAND.p = BAND.pos * 0

vp.scene.range = 1.5
vp.scene.autoscale = 0

# Let the user position obstacles:
SPHERES = []
for i in range(NSPHERES):
    S = vp.sphere(pos=vp.scene.mouse.getclick().pos, #(i*0.6 - 0.7, 0.5 + i*0.1, 0),
                  radius=0.25,
                  color=(abs(vp.sin(i)), vp.cos(i)**2, (i%10)/10.0))
    SPHERES.append(S)

while True:
    vp.rate(1.0 / DT)

    if vp.scene.mouse.clicked:
        i = len(SPHERES)
        S = vp.sphere(pos=vp.scene.mouse.getclick().pos,
                      radius=0.25,
                      color=(abs(vp.sin(i)), vp.cos(i)**2, (i%10)/10.0))
        SPHERES.append(S)

    if FLOOR:
        BELOW = vp.less(BAND.pos[:, 1], -1)
        BAND.p[:, 1] = vp.where(BELOW, 0, BAND.p[:, 1])
        BAND.pos[:, 1] = vp.where(BELOW, -1, BAND.pos[:, 1])

    # need a more physical way to make 'damped springs' than this!
    BAND.p = BAND.p * DAMP

    #band.p[0] = 0   # nail down left endpoint
    #band.p[-1] = 0  # nail down right endpoint

    BAND.pos = BAND.pos + BAND.p/M*DT

    #gravity
    BAND.p[:, 1] = BAND.p[:, 1] - M * G * DT

    # force[n] is the force on point n from point n+1 (to the right):
    LENGTH = (BAND.pos[1:] - BAND.pos[:-1])
    DIST = vp.sqrt(vp.sum(LENGTH*LENGTH, -1))
    FORCE = K * (DIST - RESTLENGTH)
    FORCE = LENGTH/DIST[:, vp.newaxis] * FORCE[:, vp.newaxis]

    BAND.p[:-1] = BAND.p[:-1] + FORCE*DT
    BAND.p[1:] = BAND.p[1:] - FORCE*DT

    # color based on "stretch":  blue -> white -> red
    C = vp.clip(DIST/RESTLENGTH * 0.5, 0, 2)

    #   blue (compressed) -> white (relaxed) -> red (tension)
    BAND.red[1:] = vp.where(vp.less(C, 1), C, 1)
    BAND.green[1:] = vp.where(vp.less(C, 1), C, 2-C)
    BAND.blue[1:] = vp.where(vp.less(C, 1), 1, 2-C)

    for S in SPHERES:
        DIST = vp.mag(BAND.pos - S.pos)[:, vp.newaxis]
        inside = vp.less(DIST, S.radius)
        if vp.sometrue(inside):
            R = (BAND.pos - S.pos) / DIST
            surface = S.pos + (S.radius)*R

            BAND.pos = surface*inside + BAND.pos*(1-inside)

            pdotR = vp.sum(vp.asarray(BAND.p)*vp.asarray(R), -1)
            BAND.p = BAND.p - R*pdotR[:, vp.newaxis]*inside
