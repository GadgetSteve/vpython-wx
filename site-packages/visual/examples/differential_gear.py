#!/usr/bin/env python
#coding:utf-8
""" Differential Gears Demo."""
from __future__ import print_function, division
from visual import *
# Kadir Haldenbilen, Feb. 2011

scene.width = scene.height = 800
scene.forward = (0.2, -0.6, -0.8)
scene.title = "Differential Gear"

def scaler(start=(1., 1.), end=(1., 1.), no_p=2):
    """ Scale some points."""
    slist = []
    for i in range(no_p):
        slist.append((start[0]+(end[0]-start[0])/(no_p-1)*i,
                      start[1]+(end[1]-start[1])/(no_p-1)*i))
    return slist

def bevel_gears(rad1=5.0, n_1=15, t_1=2.0, gratio=2.0, hole1=False, hole2=False,
                twist=0.0):
    """ Beveled Gears """
    # Gear 2 radius and teeth numbers
    r_2 = gratio*rad1
    n_2 = int(gratio*n_1)

    # Calculate the thickness of gear 2, and the scaling factor
    r_2 = r_2-t_1      # final radius of gear 2
    rad1 = (rad1/r_2)*r_2 # final radius of gear 1
    t_2 = rad1-rad1      # thickness of gear 2
    scaling = rad1/rad1 # both extrusions are scaled by this factor

    g_1 = shapes.gear(n=n_1, radius=rad1)
    if hole1:
        g_1 -= shapes.circle(radius=rad1/2.)
    g_2 = shapes.gear(n=n_2, radius=r_2)
    if hole2:
        g_2 -= shapes.circle(radius=r_2/2.)

    lnp = 2
    if twist:
        lnp = 8
    cfrm = frame()
    frm1 = frame()
    eg1 = extrusion(
        shape=g_1, pos=paths.line(
            start=(0, 0, 0),
            end=(0, 0, t_1), np=lnp),
        scale=scaler(start=(1, 1), end=(scaling, scaling), no_p=lnp),
        twist=-twist, frame=frm1)

    frm2 = frame(pos=(rad1, 0, r_2), axis=(0, 0, 1))
    eg2 = extrusion(shape=g_2, pos=paths.line(start=(0, 0, 0), end=(0, 0, t_2), np=lnp),
                    scale=scaler(start=(1, 1), end=(scaling, scaling), no_p=lnp),
                    twist=twist/gratio, frame=frm2, color=color.red)

    return rad1, n_1, r_2, n_2, eg1, eg2

R1 = 4.
N1 = 8
T1 = 3.
GR1 = 1.

R5 = 5.
N5 = 15
T5 = 4.
GR3 = 3.

R1, N1, R2, N2, EG1, EG2 = bevel_gears(rad1=R1, n_1=N1, t_1=T1, gratio=GR1, twist=0.0)
R3, N1, R4, N2, EG3, EG4 = bevel_gears(rad1=R1, n_1=N1, t_1=T1, gratio=GR1, twist=0.0)
R5, N5, R6, N6, EG5, EG6 = bevel_gears(rad1=R5, n_1=N5, t_1=T5, gratio=GR3, hole2=True, twist=0.0)
EG5.color = (1, 1, 0)
EG6.color = (0, 1, 1)

F1 = EG1.frame
F2 = EG2.frame
F3 = EG3.frame
F4 = EG4.frame
F5 = EG5.frame
F6 = EG6.frame

F1.frame = EG6.frame
F1.rotate(axis=(0, 1, 0), angle=pi/2)
F1.pos = (-R3, 0, R5)

F3.frame = EG6.frame
F3.rotate(axis=(0, 1, 0), angle=-pi/2)
F3.pos = (+R3, 0, R5)

F2.frame = EG6.frame
F2.rotate(axis=(0, 1, 0), angle=-pi/2)
F2.pos = (0, 0, R5+R1)

F4.frame = EG6.frame
F4.rotate(axis=(0, 1, 0), angle=pi/2)
F4.pos = (0, 0, R5-R3)

F1.rotate(axis=(1, 0, 0), angle=pi/N1)
F3.rotate(axis=(1, 0, 0), angle=pi/N1)

P1 = box(frame=EG6.frame, pos=(R6/2, 0, R5), size=(1, R5, R5*2),
         color=(0, 0, 1), opacity=0.5)
P2 = box(frame=EG6.frame, pos=(-R6/2., 0, R5), size=(1, R5, R5*2),
         color=(0, 0, 1), opacity=0.5)
SHFT = cylinder(frame=EG6.frame, pos=P1.pos, axis=P2.pos-P1.pos, radius=0.5,
                color=(0, 1, 0))
"""
dsk2 = extrusion(frame=eg2.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
               color=eg2.color[0], shape=(shapes.circle(radius=R2+0.4) -
                shapes.circle(radius=R2/2.)))
dsk4 = extrusion(frame=eg4.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
               color=eg4.color[0], shape=(shapes.circle(radius=R4+0.4) -
                shapes.circle(radius=R4/2.)))
dsk1 = extrusion(frame=eg1.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
               color=eg1.color[0], shape=(shapes.circle(radius=R1+0.4) -
                shapes.circle(radius=R1/2.)))
dsk3 = extrusion(frame=eg3.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
               color=eg3.color[0], shape=(shapes.circle(radius=R3+0.4) -
                shapes.circle(radius=R3/2.)))
dsk5 = extrusion(frame=eg5.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
               color=eg5.color[0], shape=(shapes.circle(radius=R5+0.4) -
                shapes.circle(radius=R5/2.)))
"""

DSK6 = extrusion(frame=EG6.frame, pos=[(0, 0, 0), (0, 0, -0.5)],
                 color=EG6.color[0], shape=(shapes.circle(radius=R6+0.4) -
                                            shapes.circle(radius=R6/2.)))

MSHAFT = extrusion(
    shape=shapes.ngon(np=8, radius=R5/2.), color=EG5.color[0]*0.5,
    pos=[EG5.pos[0]+vector(0, 0, 1)*0.01,
         EG5.pos[0]-vector(0, 0, 1)*15], frame=EG5.frame)

RAXIS = extrusion(shape=shapes.ngon(np=8, radius=R2/4.), color=EG2.color[0]*0.5,
                  pos=[EG2.pos[0], EG2.pos[0]-vector(0, 0, 1)*15], frame=EG2.frame)
LAXIS = extrusion(shape=shapes.ngon(np=8, radius=R4/4.), color=EG4.color[0]*0.5,
                  pos=[EG4.pos[0], EG4.pos[0]-vector(0, 0, 1)*15], frame=EG4.frame)
RFL = box(pos=RAXIS.pos[-1], size=(0.2, 10, 5), color=(1, 1, 0), frame=EG2.frame)
LFL = box(pos=LAXIS.pos[-1], size=(0.2, 10, 5), color=(1, 1, 0), frame=EG4.frame)

SC = extrusion(shape=shapes.rectangle(width=R6+1, height=R5)-shapes.circle(radius=R2/3),
               pos=[(0, 0, 2*R5), (0, 0, 2*R5+1)], frame=EG6.frame, color=(0, 0, 1),
               material=materials.glass)


CC = curve(pos=[(-25, 0, R6), (+25, 0, R6)])
RUN = False
ANG = pi/200
ANG2 = ANG/(R6/R5)
STRANG = ANG2/2.0
LBL = label(yoffset=300, line=0,
            text="            CLICK TO START OR PAUSE\nPRESS  R  OR  L  TO TURN, S FOR STRAIGHT")
KEY = "s"
while True:
    if scene.mouse.events:
        M_EVT = scene.mouse.getevent()
        if M_EVT.click == 'left':
            RUN = not RUN
    if scene.kb.keys:
        KEY = scene.kb.getkey().lower()
        if KEY == "r":
            LBL.text = "TURNING RIGHT"
        if KEY == "l" or KEY == "L":
            LBL.text = "TURNING LEFT"
        if KEY == "s" or KEY == "S":
            LBL.text = "DRIVING STRAIGHT - PRESS  R  OR  L  TO TURN"
    if RUN:
        EG5.frame.rotate(axis=(0, 0, 1), angle=ANG)
        EG6.frame.rotate(axis=(1, 0, 0), angle=ANG2, origin=(0, 0, R6))
        if KEY == "r" or KEY == "R":
            EG2.frame.rotate(axis=(0, 0, 1), angle=-STRANG, origin=F2.pos)
            EG4.frame.rotate(axis=(0, 0, 1), angle=+STRANG, origin=F4.pos)
            EG1.frame.rotate(axis=(1, 0, 0), angle=-STRANG, origin=F1.pos)
            EG3.frame.rotate(axis=(1, 0, 0), angle=+STRANG, origin=F3.pos)
        if KEY == "l" or KEY == "L":
            EG2.frame.rotate(axis=(0, 0, 1), angle=+STRANG, origin=F2.pos)
            EG4.frame.rotate(axis=(0, 0, 1), angle=-STRANG, origin=F4.pos)
            EG1.frame.rotate(axis=(1, 0, 0), angle=+STRANG, origin=F1.pos)
            EG3.frame.rotate(axis=(1, 0, 0), angle=-STRANG, origin=F3.pos)

    rate(100)

